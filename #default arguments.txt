#default arguments

def defualt_args(a,b=5,c=6):
    print("a=",a)
    print("b=",b)
    print("c=",c)
    
defualt_args(3,6,8)

#args vs kwargs

def args(*a):
    for element in a:
        print(element)
        
args(32,34,45,56)

def kwargs(**b):
    for element in b.items():
        print(element)

kwargs(a="15",b="05",c="65")

#positional 

def positional(a,b,/,c,d):
    print(a)
    print(b)
    print(c)
    print(d)
    
positional(10,11,c=23,d=65)

#keywords

def keywords(a,b,*,c,d):
    print(a)
    print(b)
    print(c)
    print(d)
    
keywords(100,119,c="radhika",d="kumbhojkar")    

Que1.
Positional Arguments: Arguments are matched to parameters based on their order when calling the function.

Keyword Arguments: Arguments are specified by parameter names, allowing you to provide them out of order for improved readability.

Default Arguments: Some parameters have default values, making them optional if not provided by the caller.

Variable-Length Arguments: Functions can accept a variable number of arguments using *args (for positional arguments) and **kwargs (for keyword arguments). This allows flexibility in the number of inputs.
Que2. what is *args and **kwargs
*args: Stands for "star args" and allows a function to accept a variable number of positional arguments as a tuple.

**kwargs: Stands for "double-star kwargs" and allows a function to accept a variable number of keyword arguments as a dictionary.
Que3. *args vs *kwargs
*args is used for variable-length positional arguments in a function (a tuple).
**kwargs is used for variable-length keyword arguments in a function (a dictionary).